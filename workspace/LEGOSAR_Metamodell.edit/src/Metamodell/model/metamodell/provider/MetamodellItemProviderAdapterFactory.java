/**
 */
package Metamodell.model.metamodell.provider;

import Metamodell.model.metamodell.util.MetamodellAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetamodellItemProviderAdapterFactory extends MetamodellAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetamodellItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.System} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemItemProvider systemItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.System}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSystemAdapter() {
		if (systemItemProvider == null) {
			systemItemProvider = new SystemItemProvider(this);
		}

		return systemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Hardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardwareItemProvider hardwareItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Hardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createHardwareAdapter() {
		if (hardwareItemProvider == null) {
			hardwareItemProvider = new HardwareItemProvider(this);
		}

		return hardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Software} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareItemProvider softwareItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Software}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSoftwareAdapter() {
		if (softwareItemProvider == null) {
			softwareItemProvider = new SoftwareItemProvider(this);
		}

		return softwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Brick} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrickItemProvider brickItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Brick}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBrickAdapter() {
		if (brickItemProvider == null) {
			brickItemProvider = new BrickItemProvider(this);
		}

		return brickItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Motor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotorItemProvider motorItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Motor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMotorAdapter() {
		if (motorItemProvider == null) {
			motorItemProvider = new MotorItemProvider(this);
		}

		return motorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.OSEKSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OSEKSystemItemProvider osekSystemItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.OSEKSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOSEKSystemAdapter() {
		if (osekSystemItemProvider == null) {
			osekSystemItemProvider = new OSEKSystemItemProvider(this);
		}

		return osekSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Alarm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlarmItemProvider alarmItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Alarm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAlarmAdapter() {
		if (alarmItemProvider == null) {
			alarmItemProvider = new AlarmItemProvider(this);
		}

		return alarmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Connection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionItemProvider connectionItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Connection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createConnectionAdapter() {
		if (connectionItemProvider == null) {
			connectionItemProvider = new ConnectionItemProvider(this);
		}

		return connectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.SWC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SWCItemProvider swcItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.SWC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSWCAdapter() {
		if (swcItemProvider == null) {
			swcItemProvider = new SWCItemProvider(this);
		}

		return swcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Triggerport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerportItemProvider triggerportItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Triggerport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTriggerportAdapter() {
		if (triggerportItemProvider == null) {
			triggerportItemProvider = new TriggerportItemProvider(this);
		}

		return triggerportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.SenderReceiverport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SenderReceiverportItemProvider senderReceiverportItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.SenderReceiverport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSenderReceiverportAdapter() {
		if (senderReceiverportItemProvider == null) {
			senderReceiverportItemProvider = new SenderReceiverportItemProvider(this);
		}

		return senderReceiverportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metamodell.model.metamodell.Runnable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunnableItemProvider runnableItemProvider;

	/**
	 * This creates an adapter for a {@link Metamodell.model.metamodell.Runnable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRunnableAdapter() {
		if (runnableItemProvider == null) {
			runnableItemProvider = new RunnableItemProvider(this);
		}

		return runnableItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemItemProvider != null) systemItemProvider.dispose();
		if (hardwareItemProvider != null) hardwareItemProvider.dispose();
		if (softwareItemProvider != null) softwareItemProvider.dispose();
		if (brickItemProvider != null) brickItemProvider.dispose();
		if (motorItemProvider != null) motorItemProvider.dispose();
		if (sensorItemProvider != null) sensorItemProvider.dispose();
		if (osekSystemItemProvider != null) osekSystemItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (alarmItemProvider != null) alarmItemProvider.dispose();
		if (connectionItemProvider != null) connectionItemProvider.dispose();
		if (swcItemProvider != null) swcItemProvider.dispose();
		if (triggerportItemProvider != null) triggerportItemProvider.dispose();
		if (senderReceiverportItemProvider != null) senderReceiverportItemProvider.dispose();
		if (runnableItemProvider != null) runnableItemProvider.dispose();
	}

}
